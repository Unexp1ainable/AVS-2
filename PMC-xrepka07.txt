Architektury Výpočetních Systémů (AVS 2022)
Projekt č. 2 (PMC)
Login: xrepka07

Úloha 1: Paralelizace původního řešení
===============================================================================

1) Kterou ze smyček (viz zadání) je vhodnější paralelizovat a co způsobuje 
   neefektivitu paralelizaci té druhé?

   Vhodnejšie je paralelizovať vonkajší cyklus. Je to kvôli tomu, že tá vnútorná
   nemá veľa operácií, ktoré by vlákno vykonalo, čo spôsobuje vysokú réžiu. Tiež
   sa uspávajú a budia vlákna podstatne viac ako vo vonkajšom cykle.

2) Jaké plánování (rozdělení práce mezi vlákna) jste zvolili a proč? 
   Jaký vliv má velikost "chunk" při dynamickém plánování (8, 16, 32, 64)?

   Zvolil som plánovánie "guided", pretože dávalo približne najlepšie výsledky
   a páči sa mi ako funguje.
   Zmena veľkosti "chunk" pri dynamickom plánovaní nespravila na mojom počítači
   nejaký markantný rozdiel. Pravdepodobne je to tým, že réžia vlákien je pri 
   tejto úlohe je zanedbateľná vzhľadom ku ostatným operáciám, a zároveň práca
   vlákien je pomerne vyvážená.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?
   Použil som "#pragma omp critical".


Úloha 2: Paralelní průchod stromem
===============================================================================

1) Stručně popište použití OpenMP tasků ve vašem řešení.
Task sa generuje pre každý nový oktant, nezávisle od toho či bude spracovaný
alebo nie. Takto si vlákno počíta, či ho má spracovať alebo nie a prípadne ho aj
spracuje

2) Jaký vliv má na vaše řešení tzv. "cut-off"? Je vhodné vytvářet nový 
   task pro každou krychli na nejnižší úrovni?
Nie, pretože to je každopádne práca len pre jedno vlákno, tak to môže rovno 
spraviť to vlákno, ktoré tú kocku našlo.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?
Pre každé vlákno som vytvoril osobitný std::vector. Každé vlákno píše do vektoru,
ktoré vyberá podľa svojho id. Takto netreba synchronizáciu a stačí na konci spojiť
jednotlivé vektory. (chcel som použiť niečo iné ako v loop variante)

Úloha 3: Grafy škálování všech řešení
===============================================================================

1) Stručně zhodnoťte efektivitu vytvořených řešení (na základě grafů škálování).

2) V jakém případě (v závislosti na počtu bodů ve vstupním souboru a velikosti 
   mřížky) bude vaše řešení 1. úlohy neefektivní? (pokud takový případ existuje)

3) Je (nebo není) stromový algoritmus efektivnější z pohledu slabého škálování 
   vzhledem ke vstupu?

4) Jaký je rozdíle mezi silným a slabým škálováním?

Úloha 4: Analýza využití jader pomocí VTune
================================================================================

1) Jaké bylo průměrné využití jader pro všechny tři implementace s omezením na 
   18 vláken? Na kolik procent byly využity?
   
   ref:
   loop:
   tree:

2) Jaké bylo průměrné využití jader pro všechny tři implementace s využitím 
   všech jader? Na kolik procent se podařilo využít obě CPU?
   
   ref:
   loop:
   tree:

3) Jaké jsou závěry z těchto měření?
